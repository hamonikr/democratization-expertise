<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 
<mapper namespace="com.de.user.mapper.UsersMapper">

<resultMap type="com.de.score.Score" id="Score">
	<result column="seq" property="seq"/>
	<result column="score" property="score"/>
	<result column="userno" property="userno"/>
	<result column="pno" property="pno"/>
	<result column="section" property="section"/>
</resultMap>

<resultMap type="com.de.user.Users" id="Users">
	<result column="userno" property="userno"/>
	<result column="role" property="role"/>
	<result column="aboutme" property="aboutme"/>
	<result column="registerdate" property="registerdate"/>
	<result column="updatedate" property="updatedate"/>
	<result column="useremail" property="useremail"/>
	<result column="username" property="username"/>
	<result column="userpassword" property="userpassword"/>
	<result column="userurl" property="userurl"/>
	<result column="userid" property="userid"/>
	<result column="picture" property="picture"/>
	<result column="userstatus" property="userstatus"/>
	<result column="newslater" property="newslater"/>
	<result column="userprofileimg" property="userprofileimg"/>
	<result column="location" property="location"/>
	<result column="enterpriseno" property="enterpriseno"/>
	<result column="firstRecordIndex" property="firstRecordIndex"/>
	<result column="recordCountPerPage" property="recordCountPerPage"/>
	<collection property="score" resultMap="Score"/>
</resultMap>

	<sql id="listWhere">
		and	(userid like '%' || #{searchtext} || '%' 
			or
			username like '%' || #{searchtext} || '%')
	</sql>
	
	<select id="getList" parameterType="com.de.user.Users" resultMap="Users">		 
		select 
		a.*
		,b.*
		,(select (sum(likes) - sum(dislikes)) from  tb_vote where userno=a.userno
        group by userno)as total
		from tb_users a left outer join tb_score b on a.userno = b.userno  left outer join  tb_users_detail c on a.userno = c.userno 
		where c.representat is null or c.representat !=1 
		<where>
		<if test="searchtext != null and searchtext != ''">
		<include refid="listWhere" />
		</if>
		</where>
		<if test="sort == null" >order by a.registerdate desc</if>
		<if test="sort == 1" >order by b.score desc nulls last</if>
		<if test="sort == 2" >order by total desc nulls last</if>
		OFFSET #{firstRecordIndex} LIMIT #{recordCountPerPage}
	</select>
	
	<select id="getListCount" parameterType="com.de.user.Users" resultType="java.lang.Integer">
		select count(*) from tb_users
		<if test="searchtext != null and searchtext != ''">
		<where>
		<include refid="listWhere" />
		</where>
		</if>
	</select>


<select id="findEnterpriseno" parameterType="Integer" resultType="com.de.enterprise.Enterprises">
SELECT 
	a.enterpriseno,
	a.userat,
	b.enterprisename
FROM
	tb_users_detail a left outer join tb_enterprises b on a.enterpriseno = b.enterpriseno
WHERE a.userno = #{seq} and a.userat = 1
</select>
<!-- SELECT 
	enterpriseno,
	enterprisename
FROM
	tb_enterprises
WHERE
	enterpriseno = 
		(
			SELECT 
				enterpriseno 
			FROM 
				tb_user_detail 
			WHERE 
				userno = #{seq}
		) -->
<update id="updateUserPw" parameterType="com.de.user.UserPwVO">
UPDATE
	tb_users
SET
	userpassword = #{userpasswordnew},
	updatedate = now()
WHERE
	userno = #{userno}
</update>

<select id="getEnterList" parameterType="com.de.enterprise.Enterprises" resultType="com.de.enterprise.Enterprises">
SELECT 
	enterpriseno,
	enterprisename
FROM 
	tb_enterprises
WHERE
	 enterprisename like '%' || #{enterprisename} || '%'
ORDER BY enterpriseno DESC
</select>

<update id="updateUserProfileImg" parameterType="com.de.user.Users">
UPDATE
	tb_users
SET
	userprofileimg = #{userprofileimg},
	updatedate = now()
WHERE
	userno = #{userno}
</update>

<update id="updateEnterpriseNo" parameterType="com.de.user.UsersDetail">
UPDATE
	tb_users_detail
SET
	<if test="enterpriseno != null">
		enterpriseno = #{enterpriseno}
	</if>
	<if test="enterpriseno == null">
		enterpriseno = 0,
		userat = 0
	</if>
WHERE
	userno = #{userno}
</update>


<select id="cntQuestionsById" parameterType="Integer" resultType="Integer">
SELECT 
	count(*) 
FROM 
	tb_questions
WHERE
	userno = #{seq}
</select>

<select id="cntAnswerById" parameterType="Integer" resultType="Integer">
SELECT 
	count(*) 
FROM 
	tb_answers
WHERE
	userno = #{seq}
</select>

<select id="cntTagAndWikiById" parameterType="com.de.wiki.Wiki" resultType="Integer">
SELECT 
	count(*) 
FROM 
	tb_wiki
WHERE
	userno = CAST(#{userno} AS TEXT)
	AND section = #{section}
</select>

<select id="findTagAndWikiByUserno" parameterType="com.de.wiki.Wiki" resultType="com.de.wiki.Wiki">
SELECT 
	wikino,
	title
FROM 
	tb_wiki
WHERE
	userno = CAST(#{userno} AS TEXT)
	AND section = #{section}
ORDER BY registerdate DESC
LIMIT 5
</select>

<select id="getUserScore" resultType="com.de.cmmn.CmmnMap">
select a.*,b.*,c.* from tb_users a 
left outer join tb_score b on a.userno = b.userno
left outer join tb_users_detail c on a.userno = c.userno
where b.score is not null and (c.representat = 0 or c.representat is null)
order by b.score desc
</select>

<select id="getPartnerScore" resultType="com.de.cmmn.CmmnMap">
select a.*,b.*,c.*,d.* from tb_users a 
left outer join tb_users_detail c on a.userno = c.userno
left outer join tb_enterprises d on a.userno = d.enterpriseno
left outer join tb_score b on d.enterpriseno = b.userno
where b.score is not null
order by b.score desc
</select>

<select id="getScore" parameterType="Integer" resultType="Integer">
SELECT (
    COALESCE((SELECT score FROM tb_score WHERE userno=#{seq}), 0)
    + COALESCE((SELECT (sum(likes) - sum(dislikes)) as score FROM tb_vote WHERE userno=#{seq}), 0)
    )
</select>

<select id="socialUserCheck" parameterType="com.de.cmmn.CmmnMap" resultType="Integer">
SELECT COUNT(*) FROM tb_users where userid=#{userid}
</select>

<insert id="socialUserSave" parameterType="com.de.cmmn.CmmnMap">
INSERT INTO tb_users (userid,username,picture,role) values(#{userid},#{username},#{picture},#{role})
</insert>

<sql id="where_getScoregraph1">
userno = #{userno}
and registerdate <![CDATA[ < ]]> to_date(to_char(now(), 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
and registerdate <![CDATA[ >= ]]>  to_date(to_char(now() - '1 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
</sql>
<sql id="where_getScoregraph2">
userno = #{userno}
and registerdate <![CDATA[ < ]]>  to_date(to_char(now() - '1 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
and registerdate <![CDATA[ >= ]]>  to_date(to_char(now() - '2 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
</sql>
<sql id="where_getScoregraph3">
userno = #{userno}
and registerdate <![CDATA[ < ]]>  to_date(to_char(now() - '2 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
and registerdate <![CDATA[ >= ]]>  to_date(to_char(now() - '3 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
</sql>
<sql id="where_getScoregraph4">
userno = #{userno}
and registerdate <![CDATA[ < ]]>  to_date(to_char(now() - '3 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
and registerdate <![CDATA[ >= ]]>  to_date(to_char(now() - '4 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
</sql>
<sql id="where_getScoregraph5">
userno = #{userno}
and registerdate <![CDATA[ < ]]>  to_date(to_char(now() - '4 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
and registerdate <![CDATA[ >= ]]>  to_date(to_char(now() - '5 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
</sql>
<sql id="where_getScoregraph6">
userno = #{userno}
and registerdate <![CDATA[ < ]]>  to_date(to_char(now() - '5 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
and registerdate <![CDATA[ >= ]]>  to_date(to_char(now() - '6 month'::interval, 'YYYY-MM-DD') || ' 00:00:00.000', 'YYYY-MM-DD')
</sql>

<select id="getScoregraph" parameterType="Integer" resultType="String">
SELECT 
	CAST(
		COALESCE(( SELECT count(*) * 5 FROM tb_questions WHERE <include refid="where_getScoregraph1"/> ), 0)
		+ COALESCE(( SELECT count(*) * 8 FROM tb_answers WHERE <include refid="where_getScoregraph1"/> ), 0)
	AS TEXT)
	
	|| ',' ||
	
	CAST(
		COALESCE(( SELECT count(*) * 5 FROM tb_questions WHERE <include refid="where_getScoregraph2"/> ), 0)
		+ COALESCE(( SELECT count(*) * 8 FROM tb_answers WHERE <include refid="where_getScoregraph2"/> ), 0)
	AS TEXT)
	
	|| ',' ||
	
	CAST(
		COALESCE(( SELECT count(*) * 5 FROM tb_questions WHERE <include refid="where_getScoregraph3"/> ), 0)
		+ COALESCE(( SELECT count(*) * 8 FROM tb_answers WHERE <include refid="where_getScoregraph3"/> ), 0)
	AS TEXT)
	
	|| ',' ||
	
	CAST(
		COALESCE(( SELECT count(*) * 5 FROM tb_questions WHERE <include refid="where_getScoregraph4"/> ), 0)
		+ COALESCE(( SELECT count(*) * 8 FROM tb_answers WHERE <include refid="where_getScoregraph4"/> ), 0)
	AS TEXT)
	
	|| ',' ||
	
	CAST(
		COALESCE(( SELECT count(*) * 5 FROM tb_questions WHERE <include refid="where_getScoregraph5"/> ), 0)
		+ COALESCE(( SELECT count(*) * 8 FROM tb_answers WHERE <include refid="where_getScoregraph5"/> ), 0)
	AS TEXT)
	
	|| ',' ||
	
	CAST(
		COALESCE(( SELECT count(*) * 5 FROM tb_questions WHERE <include refid="where_getScoregraph6"/> ), 0)
		+ COALESCE(( SELECT count(*) * 8 FROM tb_answers WHERE <include refid="where_getScoregraph6"/> ), 0)
	AS TEXT)
</select>

</mapper>